const { makeExecutableSchema,addMockFunctionsToSchema } = require('graphql-tools') // crear esquema auto ejecutable
const casual = require('casual')

// definiendo entidades y relaciones entre si
const typeDefs = `

  # definiendo el curso
  type Curso {
    id: ID!
    titulo: String!
    descripcion:String!
    profesor:Profesor
    rating:Float
    comentarios:[Comentario]
  }

  # definiendo profesores  
  type Profesor {
    id:ID!
    nombre:String!
    nacionalidad:String!
    genero:Genero
    cursos:[Curso]
  }

  enum Genero{
    MASCULINO
    FEMENINO
  }
  
  # definiendo comentarios
  type Comentario{
    id:ID!
    nombre:String!
    cuerpo:String!

  }

  # definiendo endPoints (entradas al schema) y formas de acceder
  type Query {
    cursos: [Curso]
    profesores: [Profesor]
    curso(id: Int): Curso # aceder a un curso por un id
    profesor(id: Int): Profesor #  acceder a un profesor por id
  }
`
// datos  estacticos para las entidades 
const resolvers ={
   // llamar type Query
  Query:{
    cursos: () => {
      return [{
        id: 1,
        titulo: 'Aprediendo graphql',
        descripcion: 'estoy es pero motivado para apreder graphql y muchas cosas mas'
      }, {
          id:2,
          titulo: 'Aprediendo graphql con node js',
          descripcion: 'estoy motivado'
      }]
    }
  },  
  // llamar type Curso-> profesor add sus valores correspondientes
  Curso:{
   profesor :() => {
    return{
      //id:1,
      nombre:'Matias Mazo',
      nacionalidad:'COLOMBIA'    
    }    
  },
  // llamar type Curso-> Comentario add sus valores correspondientes
  comentarios :()=>{
    return[{
      id:1,
      nombre:'Juan Mazo',
      cuerpo:'mensaje de comentario'
    },{
      id:2,
      nombre:'Estiven Mazo',
      cuerpo:'mensaje de comentario para platzi'
    }]
   }    
  }
}


const schema = makeExecutableSchema({
  typeDefs,  // definicion de tipos
  resolvers
})

// generar data falsa alos schemas
addMockFunctionsToSchema({
schema,
mocks:{ // definir como se resuelve cada entidad mocks
  Curso:()=>{
    return{
      id:casual.uuid,
      titulo: casual.sentence,
      descripcion:casual.sentences(2)
    }
  },
  Profesor: () =>{
    return{
      nombre:casual.name,
      nacionalidad: casual.country
    }
  }
},
preserveResolvers:false // responder con los valores de el resolvers
})

module.exports = schema